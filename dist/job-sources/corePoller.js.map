{"version":3,"sources":["../../lib/job-sources/corePoller.js"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,SAAS,QAAQ,gBAAR,EAA0B,MAA1B,CAAb;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;;AAEA,IAAI,kBAAkB,MAAtB;AACA,IAAI,QAAQ,MAAM,QAAN,CAAe;AACzB,QAAM;AADmB,CAAf,CAAZ;;AAIA,IAAI,QAAQ,OAAO,UAAnB;;AAEA,SAAS,SAAT,CAAoB,OAApB,EAA6B;AAC3B,MAAI,oBAAoB,QAAxB,EAAkC;AAChC;AACD;;AAED,MAAI,UAAU;AACZ,aAAS,EAAC,eAAe,KAAhB,EADG;AAEZ,aAAS,IAFG,EAEM;AAClB,cAAU,OAHE,EAGO;AACnB,aAAS,KAAK,SAAL,CAAe,EAAC,kBAAkB,QAAQ,QAA3B,EAAf;AAJG,GAAd;;AAOA,SAAO,IAAP,CAAY,yBAAZ;;AAEA,QAAM,IAAN,CAAW,OAAO,OAAP,GAAiB,uBAA5B,EAAqD,OAArD,EAA8D,UAAU,GAAV,EAAe,GAAf,EAAoB,OAApB,EAA6B;AACzF,QAAI,GAAJ,EAAS;AACT,QAAI,IAAI,UAAJ,KAAmB,GAAvB,EAA4B;AAC5B,QAAI,IAAI,OAAJ,CAAY,gBAAZ,MAAkC,CAAtC,EAAyC;AACzC,QAAI,MAAM,OAAV;AACA,sBAAkB,QAAlB;AACA,WAAO,IAAP,CAAY,aAAZ,EAA2B,GAA3B;AACA,YAAQ,IAAR,CAAa,6BAAb,EAA4C,GAA5C,EAAiD,UAAU,GAAV,EAAe,GAAf,EAAoB;AACnE,UAAI,GAAJ,EAAS;AACP,eAAO,IAAP,CAAY,0CAAZ,EAAwD,GAAxD;AACA;AACD;AACF,KALD;AAMD,GAbD;AAcD;;AAED,OAAO,OAAP,GAAiB,UAAU,OAAV,EAAmB,eAAnB,EAAoC;AACnD,sBAAoB,OAApB;AACA,UAAQ,EAAR,CAAW,sCAAX,EAAmD,UAAU,GAAV,EAAe,EAAf,EAAmB;AACpE,sBAAkB,MAAlB;AACA,OAAG,IAAH,EAAS,GAAT;AACD,GAHD;AAIA,UAAQ,EAAR,CAAW,YAAX,EAAyB,UAAU,QAAV,EAAoB;AAC3C,YAAQ,QAAR;AACD,GAFD;AAGA,cAAY,YAAY;AAAE,cAAU,OAAV;AAAoB,GAA9C,EAAgD,eAAhD;AACD,CAVD;;AAYA,SAAS,mBAAT,CAA8B,OAA9B,EAAuC;AACrC,UAAQ,IAAR,CAAa,kCAAb,EACE,SADF,EAEE,sCAFF,EAGE,IAHF,EAIE,UAAU,GAAV,EAAe,GAAf,EAAoB;AAClB,WAAO,KAAP,CAAa,6BAAb,EAA4C,GAA5C;AACD,GANH;AAOD","file":"corePoller.js","sourcesContent":["var Wreck = require('wreck')\nvar logger = require('../util/log.js')(module)\nvar config = require('config')\n\nvar jobRunnerStatus = 'done'\nvar wreck = Wreck.defaults({\n  json: true\n})\n\nvar token = config.droneToken\n\nfunction getNewJob (emitter) {\n  if (jobRunnerStatus === 'active') {\n    return\n  }\n\n  var options = {\n    headers: {authorization: token},\n    timeout: 1000,    // 1 second, default: unlimited\n    maxBytes: 1048576, // 1 MB, default: unlimited\n    payload: JSON.stringify({requiredResource: process.platform})\n  }\n\n  logger.info('asking core for new job')\n\n  wreck.post(config.coreUrl + '/api/v1/jobs/retrieve', options, function (err, res, payload) {\n    if (err) return\n    if (res.statusCode !== 200) return\n    if (res.headers['content-length'] === 0) return\n    var job = payload\n    jobRunnerStatus = 'active'\n    logger.info('got new job', job)\n    emitter.emit('workflow.baseEvents.job.new', job, function (err, res) {\n      if (err) {\n        logger.warn('something went wrong whilst processing: ', job)\n        // TODO: notify core that this job failed (re-insert into queue?)\n      }\n    })\n  })\n}\n\nmodule.exports = function (emitter, pollingInterval) {\n  installIntoWorkflow(emitter)\n  emitter.on('workflow.registeredEvent.core.poller', function (job, cb) {\n    jobRunnerStatus = 'done'\n    cb(null, job)\n  })\n  emitter.on('auth.token', function (newToken) {\n    token = newToken\n  })\n  setInterval(function () { getNewJob(emitter) }, pollingInterval)\n}\n\nfunction installIntoWorkflow (emitter) {\n  emitter.emit('workflow.registeredEvent.install',\n    'job.new',\n    'workflow.registeredEvent.core.poller',\n    1000,\n    function (err, res) {\n      logger.debug('installIntoWorkflow failed!', err)\n    })\n}\n"]}