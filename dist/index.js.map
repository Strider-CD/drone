{"version":3,"sources":["../lib/index.js"],"names":[],"mappings":"AAAA;;AAEA,MAAM,SAAS,QAAQ,QAAR,CAAf;AACA,MAAM,SAAS,QAAQ,QAAR,CAAf;AACA,MAAM,eAAe,QAAQ,eAAR,CAArB;AACA,MAAM,QAAQ,QAAQ,OAAR,CAAd;AACA,MAAM,kBAAkB,QAAQ,2BAAR,CAAxB;AACA,MAAM,sBAAsB,QAAQ,0BAAR,CAA5B;;AAEA,IAAI,CAAC,OAAO,UAAZ,EAAwB;AACtB,UAAQ,KAAR,CAAc,qBAAd;AACA,UAAQ,IAAR,CAAa,CAAb;AACD;;AAED,IAAI,SAAS,IAAI,OAAO,YAAX,EAAb,C,CAAuC;AACvC,IAAI,SAAS,OAAO,OAAO,OAAP,GAAiB,SAAjB,GAA6B,OAAO,UAA3C,CAAb;AACA,IAAI,UAAU,IAAI,YAAJ,EAAd;;AAEA,gBAAgB,OAAhB;AACA,oBAAoB,OAApB,EAA6B,eAA7B;;AAEA,IAAI,UAAU,QAAQ,WAAR,CAAd;AACA,QAAQ,OAAR,EAAiB,MAAjB;;AAEA,QAAQ,GAAR,CAAY,sBAAZ,EAAoC,QAAQ,QAA5C;AACA,QAAQ,GAAR,CAAY,aAAZ,EAA2B,OAAO,UAAlC;;AAEA;AACA,QAAQ,IAAR,CAAa,YAAb,EAA2B,OAAO,UAAlC;;AAEA,MAAM,IAAN,CAAW,OAAO,OAAP,GAAiB,yBAAjB,GAA6C,OAAO,UAA/D,EAA2E;AACzE,WAAS,EAAE,eAAe,YAAY,OAAO,UAApC;AADgE,CAA3E,EAEG,UAAU,GAAV,EAAe,GAAf,EAAoB,OAApB,EAA6B;AAC9B,UAAQ,GAAR,CAAY,MAAM,GAAN,GAAY,WAAxB;AACA,UAAQ,GAAR,CAAY,QAAQ,QAAR,EAAZ;AACD,CALD","file":"index.js","sourcesContent":["'use strict'\n\nconst Primus = require('primus')\nconst config = require('config')\nconst EventEmitter = require('eventemitter3')\nconst Wreck = require('wreck')\nconst workflowHandler = require('./event-handlers/workflow')\nconst jobSourceCorePoller = require('./job-sources/corePoller')\n\nif (!config.droneToken) {\n  console.error('drone token invalid')\n  process.exit(1)\n}\n\nlet socket = new Primus.createSocket() // eslint-disable-line new-cap\nlet client = socket(config.coreUrl + '?token=' + config.droneToken)\nlet emitter = new EventEmitter()\n\nworkflowHandler(emitter)\njobSourceCorePoller(emitter, pollingInterval)\n\nvar plugins = require('./plugins')\nplugins(emitter, client)\n\nconsole.log('this drone runs on: ', process.platform)\nconsole.log('using token', config.droneToken)\n\n// TODO: periodic token refresh (in corePoller)?\nemitter.emit('auth.token', config.droneToken)\n\nWreck.post(config.coreUrl + '/api/v1/drones/checkin/' + config.droneToken, {\n  headers: { Authorization: 'Bearer ' + config.droneToken }\n}, function (err, res, payload) {\n  console.log(err ? err : 'Activated')\n  console.log(payload.toString())\n})\n"]}