{"version":3,"sources":["../lib/index.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,eAAe,QAAQ,eAAR,CAAnB;AACA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,kBAAkB,QAAQ,8BAAR,CAAtB;AACA,IAAI,sBAAsB,QAAQ,6BAAR,CAA1B;;AAEA,IAAI,kBAAkB,IAAtB;;AAEA,IAAI,CAAE,OAAO,UAAb,EAA0B;AACxB,MAAI,OAAO,UAAP,CAAkB,MAAlB,KAA6B,CAAjC,EAAoC;AAClC,YAAQ,KAAR,CAAc,qBAAd;AACA,YAAQ,IAAR,CAAa,CAAb;AACD;AACF;;AAED,IAAI,SAAS,IAAI,OAAO,YAAX,EAAb,C,CAAuC;AACvC,IAAI,SAAS,OAAO,OAAO,OAAP,GAAiB,SAAjB,GAA6B,OAAO,UAA3C,CAAb;AACA,IAAI,UAAU,IAAI,YAAJ,EAAd;;AAEA,gBAAgB,OAAhB;AACA,oBAAoB,OAApB,EAA6B,eAA7B;;AAEA,IAAI,UAAU,QAAQ,WAAR,CAAd;AACA,QAAQ,OAAR,EAAiB,MAAjB;;AAEA,QAAQ,GAAR,CAAY,sBAAZ,EAAoC,QAAQ,QAA5C;AACA,QAAQ,GAAR,CAAY,aAAZ,EAA2B,OAAO,UAAlC;;AAEA;AACA,QAAQ,IAAR,CAAa,YAAb,EAA2B,OAAO,UAAlC;;AAEA,MAAM,IAAN,CAAW,OAAO,OAAP,GAAiB,yBAAjB,GAA6C,OAAO,UAA/D,EAA2E;AACzE,WAAS,EAAE,eAAe,YAAY,OAAO,UAApC;AADgE,CAA3E,EAEG,UAAU,GAAV,EAAe,GAAf,EAAoB,OAApB,EAA6B;AAC9B,UAAQ,GAAR,CAAY,MAAM,GAAN,GAAY,WAAxB;AACA,UAAQ,GAAR,CAAY,QAAQ,QAAR,EAAZ;AACD,CALD","file":"index.js","sourcesContent":["'use strict'\n\nvar Primus = require('primus')\nvar config = require('config')\nvar EventEmitter = require('eventemitter3')\nvar Wreck = require('wreck')\nvar workflowHandler = require('./event-handlers/workflow.js')\nvar jobSourceCorePoller = require('./job-sources/corePoller.js')\n\nvar pollingInterval = 1000\n\nif (!(config.droneToken)) {\n  if (config.droneToken.length === 0) {\n    console.error('drone token invalid')\n    process.exit(1)\n  }\n}\n\nvar socket = new Primus.createSocket() // eslint-disable-line new-cap\nvar client = socket(config.coreUrl + '?token=' + config.droneToken)\nvar emitter = new EventEmitter()\n\nworkflowHandler(emitter)\njobSourceCorePoller(emitter, pollingInterval)\n\nvar plugins = require('./plugins')\nplugins(emitter, client)\n\nconsole.log('this drone runs on: ', process.platform)\nconsole.log('using token', config.droneToken)\n\n// TODO: periodic token refresh (in corePoller)?\nemitter.emit('auth.token', config.droneToken)\n\nWreck.post(config.coreUrl + '/api/v1/drones/checkin/' + config.droneToken, {\n  headers: { Authorization: 'Bearer ' + config.droneToken }\n}, function (err, res, payload) {\n  console.log(err ? err : 'Activated')\n  console.log(payload.toString())\n})\n"]}