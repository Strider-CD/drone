{"version":3,"sources":["../lib/workflow-runner.js"],"names":[],"mappings":"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","file":"workflow-runner.js","sourcesContent":["import path from 'path'\nimport Bluebird from 'bluebird'\nimport homedir from 'homedir'\nimport shell from 'shelljs'\n\nexport default class WorkflowRunner {\n  constructor(project, job, workflow, options) {\n    if (!project) throw new Error('Invalid project specified')\n    if (!job) throw new Error('Invalid job specified')\n    if (!workflow) throw new Error('Invalid workflow specified')\n\n    options = options || {}\n\n    const homeDir = homedir()\n\n    this.project = project\n    this.job = job\n    this.workflow = workflow\n    this.homeDir = homeDir\n    this.results = []\n    this.cloneDir = options.cloneDir || path.join(homeDir, '.drone-data')\n    this.pluginDir = options.pluginDir || path.join(homeDir, '.drone-plugins')\n  }\n\n  /**\n   * Start the execution of the workflow tasks.\n   *\n   */\n  async start() {\n    let startTask = this.getTask(this.workflow.startTaskId)\n\n    if (!startTask) {\n      throw new Error('Invalid workflow - missing start task')\n    }\n\n    await this.runTask(startTask)\n    return this.finish()\n  }\n\n  /**\n   * Run a given task\n   */\n  async runTask(task) {\n    if (task.tasks) {\n      // group of parallel tasks\n      await this.runParallelTask(task)\n      return Bluebird.resolve()\n    } else {\n      // single task\n      try {\n        let result = task.module ? await this.runPlugin(task.module, task.options) :\n          await this.runCmd(task.cmd, task.options)\n\n        this.results.push(result)\n\n        if (task.successTaskId) {\n          return await this.runTask(this.getTask(task.successTaskId))\n        } else {\n          return Bluebird.resolve()\n        }\n      } catch (error) {\n        if (task.failureTaskId) {\n          let failureResult = await this.runTask(this.getTask(task.failureTaskId))\n          this.results.push(failureResult)\n        } else {\n          return Bluebird.reject(error)\n        }\n      }\n    }\n  }\n\n  async runParallelTask(task) {\n    let taskKeys = Object.keys(task.tasks)\n\n    try {\n      await Bluebird.all(taskKeys.map(key => this.runTask(task.tasks[key])))\n\n      if (task.successTaskId) {\n        return await this.runTask(this.getTask(task.successTaskId))\n      } else {\n        return Bluebird.resolve()\n      }\n    } catch (error) {\n      if (task.failureTaskId) {\n        let failureResult = await this.runTask(this.getTask(task.failureTaskId))\n        this.results.push(failureResult)\n      } else {\n        return Bluebird.reject(error)\n      }\n    }\n  }\n\n  getTask(id) {\n    return this.workflow.tasks[id]\n  }\n\n  /**\n   * Fetch plugin and run with options and context data\n   */\n  async runPlugin(name, options) {\n    let plugin = await this.getPlugin(name)\n\n    if (plugin && !plugin.then) {\n      try {\n        let result = plugin(this.project, this.job, options)\n        return Bluebird.resolve(result)\n      } catch (error) {\n        return Bluebird.reject(error)\n      }\n    } else if (plugin && plugin.then) {\n      return plugin;\n    } else {\n      return Bluebird.reject(`invalid plugin: ${name}`)\n    }\n  }\n\n  async getPlugin(name) {\n    let plugin\n\n    try {\n      let pluginPath = path.join(this.pluginDir, name)\n      plugin = require(pluginPath)\n    } catch(e) {\n      try {\n        plugin = require(name)\n      } catch (e2) {\n        await this.runCmd(`npm install ${name}`)\n        plugin = require(name)\n      }\n    }\n\n    return plugin\n  }\n\n  /**\n   * `cmd` - The actual command to run\n   * `options` - Options for the command above.\n   *  - `cwd` - The directory that commands start in\n   *  - `screen` - The public command with private data masked\n   *  - `env` - The environment vars, PATH etc..\n   */\n  runCmd(cmd, options) {\n  /*\n    options = options || {}\n\n    return new Bluebird((resolve, reject) => {\n      try {\n        console.log(`running cmd: ${cmd}`)\n\n        let dir = options.cwd || path.join(this.cloneDir, this.project.id || 'test')\n\n        // check if the cwd exists, if not make it\n        if (!shell.test('-d', dir)) {\n          shell.mkdir('-p', dir)\n        }\n\n        // Run all commands in cwd\n        shell.pushd(dir)\n      } catch (e) {\n        return reject(e)\n      }\n\n      shell.exec(cmd, function (code, output) {\n        shell.popd()\n\n        if (code > 0) {\n          return reject(output)\n        }\n\n        resolve(code)\n      })\n    })\n    */\n    var DockerShell = require('docker-shell').default\n    var dockerShell = new DockerShell()\n\n    return dockerShell.run(cmd).then(({ kill }) => {\n      console.log('has container?')\n      console.log(container)\n      this.killDocker = kill\n    }).catch((error) => {\n      console.log(error)\n      throw error\n    })\n  }\n\n  async finish(task) {\n    this.killDocker()\n    return Bluebird.resolve(this.results)\n  }\n}\n"]}